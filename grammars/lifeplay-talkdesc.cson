fileTypes: [
	"lptalk"
	"lpdesc"
]
name: "LifePlay Talk & Desc"
scopeName: "source.lifeplay-talkdesc"
limitLineLength: false
maxTokensPerLine: 500
patterns: [{
	begin: "^(\\S.*)$"
	beginCaptures:
		1: patterns: [{ include: "#trigger" }]
	end: "\\z"
	patterns: [{ include: "#line2" }]
}]
repository:
	isNone:
		patterns: [{
			match: "[ ]*((?i:none))[ ]*"
			captures:
				1: name: "constant.none"
		}]
	bool:
		patterns: [{
			match: "[ ]*((?i:true|false))[ ]*"
			captures:
				1: name: "constant.boolean"
		}]
	float:
		patterns: [{
			match: "[ ]*(([+-]?)[0-9]+(?:\\.[0-9]+)?)[ ]*"
			captures:
				1: name: "constant.numeric"
				2: name: "keyword.operator.other.unit"
		}]
	variable:
		patterns: [
			{ include: "#isNone" }
			{ include: "#bool" }
			{ include: "#float" }
			{
				match: "[ ]*([a-zA-Z_]\\w*)(?:(\\.)([a-zA-Z_]\\w*)|(:)([a-zA-Z_]\\w*))"
				captures:
					1: name: "meta.class.variable"
					2: name: "meta.delimiter.period"
					3: name: "variable"
					4: name: "meta.delimiter.colon"
					5: name: "variable.other.member"
			}
			{
				comment: "Since we canâ€™t make clear distinctions between on object, a var, and a stat, let just specified that an object begin by a upercase and the others by a lowercase or dash."
				match: "[ ]*(?:([A-Z]\\w*)|([a-z_]\\w*))"
				captures:
					1: name: "meta.class.variable"
					2: name: "variable"
			}
		]
	param_variable:
		patterns: [
			{ include: "#isNone" }
			{ include: "#bool" }
			{ include: "#float" }
			{
				match: "[ ]*([a-zA-Z_]\\w*)(?:(\\.)([a-zA-Z_]\\w*)|(:)([a-zA-Z_]\\w*))"
				captures:
					1: name: "meta.class.variable"
					2: name: "meta.delimiter.period"
					3: name: "variable"
					4: name: "meta.delimiter.colon"
					5: name: "variable.other.member"
			}
			{
				comment: "Since it can be anything, lets just simply name it."
				match: "[ ]*((?:[^,\\s\\)]+|[ ]+(?![,\\)]))+)"
				captures:
					1: name: "function.parameter.variable"
			}
		]
	isSpecialFnt:
		patterns: [
			{
				match: "^(?i:(\\.)(?:((?:set|get|clear)Global|(?:set|get)(?:Actor(?:Alias|Var)|GlobalString)|modifyActorVar|setDatingId|getID)|(convertToLocalCurrency|Round|Floor))|(Random|Power))[ ]*$"
				captures:
					1: name: "meta.delimiter.period"
					2: name: "entity.name.support.function"
					3: name: "entity.name.support.function.any-method"
					4: name: "entity.name.support.function.any-method"
			}
			{
				match: "^(?i:((?:set|get|clear)Global|(?:set|get)(?:Actor(?:Alias|Var)|GlobalString)|modifyActorVar|setDatingId|getID|convertToLocalCurrency|Round|Floor)|(\\.)(Random|Power))[ ]*$"
				captures:
					1: name: "invalid"
					2: name: "meta.delimiter.period"
					3: name: "invalid"
			}
			{
				match: "^(\\.?)(.+)[ ]*$"
				captures:
					1: name: "meta.delimiter.period"
					2: name: "entity.name.function"
			}
		]
	subFnt:
		patterns: [{
			begin: "[ ]*(\\))(\\.)([a-zA-Z]\\w*)[ ]*(\\()(?:[ ]*(?=[!+-][0-9a-zA-Z_\\[])(?:([+-])|(!)))?"
			beginCaptures:
				1: name: "punctuation.definition.parameters.end.bracket.round"
				2: name: "meta.delimiter.period"
				3: patterns: [
					{
						match: "^(?i:(convertToLocalCurrency|Round|Floor))[ ]*$"
						captures:
							1: name: "entity.name.support.function.any-method"
					}
					{
						match: "^(?i:((?:set|get|clear)Global|(?:set|get)(?:Actor(?:Alias|Var)|GlobalString)|modifyActorVar|setDatingId|getID|Random|Power))[ ]*$"
						captures:
							1: name: "invalid"
							2: name: "meta.delimiter.period"
							3: name: "invalid"
					}
					{
						match: "^(.+)[ ]*$"
						captures:
							1: name: "entity.name.function"
					}
				]
				4: name: "punctuation.definition.parameters.begin.bracket.round"
				5: name: "keyword.operator.other.unit"
				6: name: "keyword.operator"
			end: "[ ]*(?=\\))(?!\\.[a-zA-Z]\\w*[ ]*\\()"
			patterns: [
				{ include: "#subFnt" }
				{ include: "#parameters" }
			]
		}]
	_statement:
		patterns: [
			{
				match: "[ ]*(\".*?\")"
				captures:
					1: patterns: [{ include: "#string" }]
			}
			{
				begin: "[ ]*(?:([a-zA-Z_]\\w*))?((?(1)\\.)[a-zA-Z]\\w*)[ ]*(\\()(?:[ ]*(?=[!+-][0-9a-zA-Z_\\[])(?:([+-])|(!)))?"
				beginCaptures:
					1: name: "meta.class.variable"
					2: patterns: [{ include: "#isSpecialFnt" }]
					3: name: "punctuation.definition.parameters.begin.bracket.round"
					4: name: "keyword.operator.other.unit"
					5: name: "keyword.operator"
				end: "[ ]*(\\))(?!\\.[a-zA-Z]\\w*[ ]*\\()"
				endCaptures:
					1: name: "punctuation.definition.parameters.end.bracket.round"
				patterns: [
					{ include: "#subFnt" }
					{ include: "#parameters" }
				]
			}
			{
				begin: "[ ]*(\\[)(?:[ ]*(?=[!+-][0-9a-zA-Z_\\[])(?:([+-])|(!)))?"
				beginCaptures:
					1: name: "keyword.control.storage.begin.bracket.square"
					2: name: "keyword.operator.other.unit"
					3: name: "keyword.operator"
				end: "[ ]*(\\])"
				endCaptures:
					1: name: "keyword.control.storage.end.bracket.square"
				patterns: [{
					begin: "(?!\\])"
					end: "[ ]*(?=\\]|//|$)"
					patterns: [{ include: "#_statement" }]
				}]
			}
			{
				comment: "A closing bracket seemingly unpaired."
				match: "[ ]*([\\)\\]])"
				captures:
					1: name: "invalid.illegal"
			}
			{
				match: "[ ]*(?:([+*-]|/(?!/)|[<>]=?|[!=]=)|([|&]{2}))(?:[ ]*(?=[!+-][0-9a-zA-Z_\\[])(?:([+-])|(!)))?"
				captures:
					1: name: "keyword.operator"
					2: name: "keyword.operator.control"
					3: name: "keyword.operator.other.unit"
					4: name: "keyword.operator"
			}
			{ include: "#variable" }
			{
				match: "[ ]*(\\.)[ ]*"
				captures:
					1: name: "invalid.illegal"
			}
		]
	interpolations:
		patterns: [{
			begin: "(<)"
			beginCaptures:
				1: name: "punctuation.section.embedded.begin.bracket.angle"
			end: "(>)"
			endCaptures:
				1: name: "punctuation.section.embedded.end.bracket.angle"
			patterns: [{
				match: "([^>]*)"
				captures:
					1: patterns: [{ include: "#_statement" }]
			}]
		}]
	fenceless_string:
		patterns: [{
			begin: "^([ \t]*)"
			beginCaptures:
				1: name: "blank"
			end: "$"
			contentName: "string"
			patterns: [{ include: "#interpolations" }]
		}]
	string:
		patterns: [{
			begin: "^[ ]*(\")"
			beginCaptures:
				1: name: "string.quote.double.begin"
			end: "(\")"
			endCaptures:
				1: name: "string.quote.double.end"
			contentName: "string"
			patterns: [{ include: "#interpolations" }]
		}]
	parameters:
		patterns: [{
			begin: "\\G"
			end: "[ ]*(?=\\))"
			patterns: [
				{
					match: "[ ]*(//).*$"
					captures:
						1: name: "invalid.illegal"
				}
				{
					match: "[ ]*(,)(?:[ ]*(?=[!+-][0-9a-zA-Z_\\[])(?:([+-])|(!)))?"
					captures:
						1: name: "meta.separator"
						2: name: "keyword.operator.other.unit"
						3: name: "keyword.operator"
				}
				{
					match: "[ ]*(\".*?\")"
					captures:
						1: patterns: [{ include: "#string" }]
				}
				{
					match: "[ ]*(?:([+*-]|/(?!/)|[<>]=?|[!=]=)|([|&]{2}))(?:[ ]*(?=[!+-][0-9a-zA-Z_\\[])(?:([+-])|(!)))?"
					captures:
						1: name: "keyword.operator"
						2: name: "keyword.operator.control"
						3: name: "keyword.operator.other.unit"
						4: name: "keyword.operator"
				}
				{
					match: "[ ]*(?!\\()([^ )(,]+)"
					captures:
						1: patterns: [{ include: "#param_variable" }]
				}
			]
		}]
	cmt_or_err:
		patterns: [
			{
				match: "(//.*)$"
				captures:
					1: name: "comment"
			}
			{
				match: "(.).*$"
				captures:
					1: name: "invalid.illegal"
			}
		]
	trigger:
		patterns: [{
			match: "^((\\*)[A-Z_]*(\\*))?(.*)$"
			captures:
				1: name: "keyword"
				2: name: "meta.selector"
				3: name: "meta.selector"
				4: patterns: [{
					begin: "^"
					end: "$"
					patterns: [
						{
							match: "[ ]*(//.*)$"
							captures:
								1: name: "comment"
						}
						{ include: "#_statement" }
					]
				}]
			}]
	line2:
		patterns: [
			{
				begin: "^(?:[ ]{4}|\t)(.*)$"
				beginCaptures:
					1: patterns: [{ include: "#fenceless_string" }]
				end: "\\z"
				patterns: [{ include: "#line3" }]
			}
			{
				match: "^([ ]{0,3}[^ ])(.*)$"
				captures:
					1: name: "invalid.illegal"
					2: patterns: [{ include: "$base" }]
			}
		]
	line3:
		patterns: [
			{
				begin: "^(?!##)([ ]{0,3}[^ ]).*$"
				beginCaptures:
					1: name: "invalid.illegal"
				end: "\\z"
				patterns: [{ include: "$self" }]
			}
			{
				begin: "^(##)[ ]*(.*)$"
				beginCaptures:
					1: name: "keyword.control"
					2: patterns: [{ include: "#cmt_or_err" }]
				end: "\\z"
				patterns: [{ include: "#lpdesc" }]
			}
			{
				begin: "^(?:[ ]{4}|\t)(.*)$"
				beginCaptures:
					1: patterns: [{ include: "#fenceless_string" }]
				end: "\\z"
				patterns: [{ include: "#lineX" }]
			}
		]
	lineX:
		patterns: [
			{
				begin: "^(?:(##)[ ]*(.*)|([ ]{0,3}[^ ]).*)$"
				beginCaptures:
					1: name: "keyword.control"
					2: patterns: [{ include: "#cmt_or_err" }]
					3: name: "invalid.illegal"
				end: "\\z"
				patterns: [{ include: "#lptalk" }]
			}
			{
				begin: "^(?:[ ]{4}|\t)(.*)$"
				beginCaptures:
					1: patterns: [{ include: "#fenceless_string" }]
				end: "\\z"
				patterns: [{ include: "#lineX" }]
			}
		]
	lpdesc_body:
		patterns: [{
			begin: "^(?:[ ]{4}|\t)(.*)$"
			beginCaptures:
				1: patterns: [{ include: "#fenceless_string" }]
			end: "\\z"
			patterns: [{ include: "#lpdesc_end" }]
		}]
	lpdesc_end:
		patterns: [
			{
				match: "^(?!##)([^#]{1,2}).*$"
				captures:
					1: name: "invalid.illegal"
			}
			{
				begin: "^(##)[ ]*(.*)$"
				beginCaptures:
					1: name: "keyword.control"
					2: patterns: [{ include: "#cmt_or_err" }]
				end: "\\z"
				patterns: [{ include: "#lpdesc" }]
			}
		]
	lpdesc:
		patterns: [{
			begin: "^"
			end: "\\z"
			patterns: [{
				begin: "^(\\S.*)$"
				beginCaptures:
					1: patterns: [{ include: "#trigger" }]
				end: "\\z"
				patterns: [{ include: "#lpdesc_body" }]
			}]
		}]
	lptalk_l1:
		patterns: [
			{
				begin: "^(##|[ ]{0,3}[^ ]).*$"
				beginCaptures:
					1: name: "invalid.illegal"
				end: "\\z"
				patterns: [{ include: "#lptalk" }]
			}
			{
				begin: "^(?:[ ]{4}|\t)(.*)$"
				beginCaptures:
					1: patterns: [{ include: "#fenceless_string" }]
				end: "\\z"
				patterns: [{ include: "#lptalk_l2" }]
			}
		]
	lptalk_l2:
		patterns: [
			{
				begin: "^(##|[ ]{0,3}[^ ]).*$"
				beginCaptures:
					1: name: "invalid.illegal"
				end: "\\z"
				patterns: [{ include: "#lptalk" }]
			}
			{
				begin: "^(?:[ ]{4}|\t)(.*)$"
				beginCaptures:
					1: patterns: [{ include: "#fenceless_string" }]
				end: "\\z"
				patterns: [{ include: "#lineX" }]
			}
		]
	lptalk:
		patterns: [{
			begin: "^"
			end: "\\z"
			patterns: [{
				begin: "^(\\S.*)$"
				beginCaptures:
					1: patterns: [{ include: "#trigger" }]
				end: "\\z"
				patterns: [{ include: "#lptalk_l1" }]
			}]
		}]
