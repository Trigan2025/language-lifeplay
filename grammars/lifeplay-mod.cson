fileTypes: [
	"lpmod"
	"lpaddon"
	"lpquest"
	"lpstat"
	"lpaction"
]
name: "LifePlay Mod, Quest, Stat, Action"
scopeName: "source.lifeplay-mod"
limitLineLength: false
maxTokensPerLine: 500
patterns: [
	{
		comment: "This is to allow lpai and lpscene snippets."
		begin: "^(?=(?i:LP))"
		end: "\\z"
		name: "root-snippet-domain"
	}
	{
		begin: "^(?=MODULE_)"
		end: "\\z"
		name: "lpmod"
		patterns: [{ include: "#lpmod" }]
	}
	{
		begin: "^(?=QUEST|ID)"
		end: "\\z"
		name: "lpquest"
		patterns: [{ include: "#lpquest" }]
	}
	{
		begin: "^(?=ACTION_)"
		end: "\\z"
		name: "lpaction"
		patterns: [{ include: "#lpaction" }]
	}
	{
		begin: "^(?=STAT_)"
		end: "\\z"
		name: "lpstat"
		patterns: [{ include: "#lpstat" }]
	}
]
repository:
	isNone:
		patterns: [{
			match: "^[ ]*((?i:none))[ ]*$"
			captures:
				1: name: "constant.none"
		}]
	identifier:
		patterns: [{
			comment: "I am not sure if there is really limitations in what should be accepted since it is not mentionned in the documentations, so lets be simple."
			match: "^[ ]*(?:(\\w+)|(\\w*)([^\\w\\s]+).*)[ ]*$"
			captures:
				1: name: "entity.name.section.label"
				2: name: "entity.name.section.label"
				3: name: "invalid"
		}]
	identifiers:
		patterns: [{
			begin: "^[ ]*([^\\s,]*)"
			beginCaptures:
				1: patterns: [{ include: "#identifier" }]
			end: "[ ]*(,)?[ ]*$"
			endCaptures:
				1: name: "invalid"
			patterns: [{
				match: "[ ]*(,)[ ]*([^\\s,]*)"
				captures:
					1: name: "meta.separator"
					2: patterns: [{ include: "#identifier" }]
			}]
		}]
	identifier_flags:
		patterns: [{
			begin: "^[ ]*(-?)([^\\s,]*)"
			beginCaptures:
				1: name: "keyword.other.unit"
				2: patterns: [{ include: "#identifier" }]
			end: "[ ]*(,)?[ ]*$"
			endCaptures:
				1: name: "invalid"
			patterns: [{
				match: "[ ]*(,)[ ]*(-?)([^\\s,]*)"
				captures:
					1: name: "meta.separator"
					2: name: "keyword.other.unit"
					3: patterns: [{ include: "#identifier" }]
			}]
		}]
	bool:
		patterns: [{
			match: "[ ]*((?i:true|false))[ ]*"
			captures:
				1: name: "constant.boolean"
		}]
	float:
		patterns: [{
			match: "[ ]*(([+-]?)[0-9]+(?:\\.[0-9]+)?)[ ]*"
			captures:
				1: name: "constant.numeric"
				2: name: "keyword.operator.other.unit"
		}]
	float_range:
		patterns: [{
			match: "^[ ]*(([+-]?)[0-9]+(?:\\.[0-9]+)?)[ ]*(-)[ ]*(([+-]?)[0-9]+(?:\\.[0-9]+)?)[ ]*$"
			captures:
				1: name: "constant.numeric"
				2: name: "invalid.illegal"
				3: name: "meta.separator.dash"
				4: name: "constant.numeric"
				5: name: "invalid.illegal"
		}]
	variable:
		patterns: [
			{ include: "#isNone" }
			{ include: "#bool" }
			{ include: "#float" }
			{
				match: "[ ]*([a-zA-Z_]\\w*)(?:(\\.)([a-zA-Z_]\\w*)|(:)([a-zA-Z_]\\w*))"
				captures:
					1: name: "meta.class.variable"
					2: name: "meta.delimiter.period"
					3: name: "variable"
					4: name: "meta.delimiter.colon"
					5: name: "variable.other.member"
			}
			{
				comment: "Since we canâ€™t make clear distinctions between on object, a var, and a stat, let just specified that an object begin by a upercase and the others by a lowercase or dash."
				match: "[ ]*(?:([A-Z]\\w*)|([a-z_]\\w*))"
				captures:
					1: name: "meta.class.variable"
					2: name: "variable"
			}
		]
	param_variable:
		patterns: [
			{ include: "#isNone" }
			{ include: "#bool" }
			{ include: "#float" }
			{
				match: "[ ]*([a-zA-Z_]\\w*)(?:(\\.)([a-zA-Z_]\\w*)|(:)([a-zA-Z_]\\w*))"
				captures:
					1: name: "meta.class.variable"
					2: name: "meta.delimiter.period"
					3: name: "variable"
					4: name: "meta.delimiter.colon"
					5: name: "variable.other.member"
			}
			{
				comment: "Since it can be anything, lets just simply name it."
				match: "[ ]*((?:[^,\\s\\)]+|[ ]+(?![,\\)]))+)"
				captures:
					1: name: "function.parameter.variable"
			}
		]
	raw_string:
		patterns: [{
			match: "^[ ]*(.*)[ ]*$"
			captures:
				1: name: "string"
		}]
	_stat_effect_or_condition:
		patterns: [{
			comment: "Unofficial effect keyword."
			match: "([A-Z]+)(?:([ ]*)(:)([ ]*)([+-]?[0-9.]+))?"
			captures:
				1: name: "variable"
				2: name: "invalid.illegal"
				3: name: "keyword.operator"
				4: name: "invalid.illegal"
				5: patterns: [{ include: "#float" }]
		}]
	effect:
		patterns: [
			{
				match: "(START|END|DURATION|INTERRUPTED)"
				name: "constant"
			}
			{
				match: "(BUFF)(?:([ ]*)(:)([ ]*)([+-]?[0-9.]+))?"
				captures:
					1: name: "constant"
					2: name: "invalid.illegal"
					3: name: "keyword.operator"
					4: name: "invalid.illegal"
					5: patterns: [{ include: "#float" }]
			}
			{ include: "#_stat_effect_or_condition" }
		]
	condition:
		patterns: [
			{
				match: "(STAT_COMPARE|IS_MALE)"
				name: "constant"
			}
			{ include: "#_stat_effect_or_condition" }
		]
	_conditions_and_effects:
		patterns: [
			{
				match: "[ ]*(,)"
				captures:
					1: name: "meta.separator"
			}
			{
				match: "[ ]*([!=]=|[<>]=?|(&&|\\|\\|))"
				captures:
					1: name: "keyword.operator"
					2: name: "keyword.operator.control"
			}
			{
				match: "[ ]*([+-]?[0-9.]+)"
				captures:
					1: patterns: [{ include: "#float" }]
			}
			{
				match: "[ ]*([a-zA-Z]\\w*)"
				captures:
					1: patterns: [{ include: "#identifier" }]
			}
		]
	effects:
		patterns: [{
			begin: "^"
			end: "$"
			patterns: [
				{ include: "#_conditions_and_effects" }
				{
					match: "[ ]*(\\()([A-Z_]+(?:[ ]*:[ ]*(?:[+-]?[0-9.]+)?)?)(\\))"
					captures:
						1: name: "punctuation.section.parens.open"
						2: patterns: [{ include: "#effect" }]
						3: name: "punctuation.section.parens.close"
				}
			]
		}]
	conditions:
		patterns: [{
			begin: "^"
			end: "$"
			patterns: [
				{
					match: "[ ]*((?i:true|false))[ ]*(?=\\()"
					captures:
						1: patterns: [{ include: "#bool" }]
				}
				{ include: "#_conditions_and_effects" }
				{
					match: "[ ]*(\\()([A-Z_]+(?:[ ]*:[ ]*(?:[+-]?[0-9.]+)?)?)(\\))"
					captures:
						1: name: "punctuation.section.parens.open"
						2: patterns: [{ include: "#condition" }]
						3: name: "punctuation.section.parens.close"
				}
			]
		}]
	interpolations:
		patterns: [{
			begin: "(<)"
			beginCaptures:
				1: name: "punctuation.section.embedded.begin.bracket.angle"
			end: "(>)"
			endCaptures:
				1: name: "punctuation.section.embedded.end.bracket.angle"
			patterns: [{
				match: "([^>]*)"
				captures:
					1: patterns: [{ include: "#embedded_statement" }]
			}]
		}]
	string:
		patterns: [{
			begin: "^[ ]*(\")"
			beginCaptures:
				1: name: "string.quote.double.begin"
			end: "(\")"
			endCaptures:
				1: name: "string.quote.double.end"
			contentName: "string"
			patterns: [{ include: "#interpolations" }]
		}]
	parameters:
		patterns: [{
			begin: "\\G"
			end: "[ ]*(?=\\))"
			patterns: [
				{
					match: "[ ]*(//).*$"
					captures:
						1: name: "invalid.illegal"
				}
				{
					match: "[ ]*(,)(?:[ ]*(?=[!+-][0-9a-zA-Z_\\[])(?:([+-])|(!)))?"
					captures:
						1: name: "meta.separator"
						2: name: "keyword.operator.other.unit"
						3: name: "keyword.operator"
				}
				{
					match: "[ ]*(\".*?\")"
					captures:
						1: patterns: [{ include: "#string" }]
				}
				{
					match: "[ ]*(?:([+*-]|/(?!/)|[<>]=?|[!=]=)|([|&]{2}))(?:[ ]*(?=[!+-][0-9a-zA-Z_\\[])(?:([+-])|(!)))?"
					captures:
						1: name: "keyword.operator"
						2: name: "keyword.operator.control"
						3: name: "keyword.operator.other.unit"
						4: name: "keyword.operator"
				}
				{
					match: "[ ]*(?!\\()([^ )(,)]+)"
					captures:
						1: patterns: [{ include: "#param_variable" }]
				}
			]
		}]
	isSpecialFnt:
		patterns: [
			{
				match: "^(?i:(\\.)(?:((?:set|get|clear)Global|(?:set|get)(?:Actor(?:Alias|Var)|GlobalString)|modifyActorVar|setDatingId|getID)|(convertToLocalCurrency|Round|Floor))|(Random|Power))[ ]*$"
				captures:
					1: name: "meta.delimiter.period"
					2: name: "entity.name.support.function"
					3: name: "entity.name.support.function.any-method"
					4: name: "entity.name.support.function.any-method"
			}
			{
				match: "^(?i:((?:set|get|clear)Global|(?:set|get)(?:Actor(?:Alias|Var)|GlobalString)|modifyActorVar|setDatingId|getID|convertToLocalCurrency|Round|Floor)|(\\.)(Random|Power))[ ]*$"
				captures:
					1: name: "invalid"
					2: name: "meta.delimiter.period"
					3: name: "invalid"
			}
			{
				match: "^(\\.?)(.+)[ ]*$"
				captures:
					1: name: "meta.delimiter.period"
					2: name: "entity.name.function"
			}
		]
	subFnt:
		patterns: [{
			begin: "[ ]*(\\))(\\.)([a-zA-Z]\\w*)[ ]*(\\()(?:[ ]*(?=[!+-][0-9a-zA-Z_\\[])(?:([+-])|(!)))?"
			beginCaptures:
				1: name: "punctuation.definition.parameters.end.bracket.round"
				2: name: "meta.delimiter.period"
				3: patterns: [
					{
						match: "^(?i:(convertToLocalCurrency|Round|Floor))[ ]*$"
						captures:
							1: name: "entity.name.support.function.any-method"
					}
					{
						match: "^(?i:((?:set|get|clear)Global|(?:set|get)(?:Actor(?:Alias|Var)|GlobalString)|modifyActorVar|setDatingId|getID|Random|Power))[ ]*$"
						captures:
							1: name: "invalid"
							2: name: "meta.delimiter.period"
							3: name: "invalid"
					}
					{
						match: "^(.+)[ ]*$"
						captures:
							1: name: "entity.name.function"
					}
				]
				4: name: "punctuation.definition.parameters.begin.bracket.round"
				5: name: "keyword.operator.other.unit"
				6: name: "keyword.operator"
			end: "[ ]*(?=\\))(?!\\.[a-zA-Z]\\w*[ ]*\\()"
			patterns: [
				{ include: "#subFnt" }
				{ include: "#parameters" }
			]
		}]
	_statement:
		patterns: [
			{
				match: "[ ]*(\".*?\")"
				captures:
					1: patterns: [{ include: "#string" }]
			}
			{
				begin: "[ ]*(?:([a-zA-Z_]\\w*))?((?(1)\\.)[a-zA-Z]\\w*)[ ]*(\\()(?:[ ]*(?=[!+-][0-9a-zA-Z_\\[])(?:([+-])|(!)))?"
				beginCaptures:
					1: name: "meta.class.variable"
					2: patterns: [{ include: "#isSpecialFnt" }]
					3: name: "punctuation.definition.parameters.begin.bracket.round"
					4: name: "keyword.operator.other.unit"
					5: name: "keyword.operator"
				end: "[ ]*(\\))(?!\\.[a-zA-Z]\\w*[ ]*\\()"
				endCaptures:
					1: name: "punctuation.definition.parameters.end.bracket.round"
				patterns: [
					{ include: "#subFnt" }
					{ include: "#parameters" }
				]
			}
			{
				begin: "[ ]*(\\[)(?:[ ]*(?=[!+-][0-9a-zA-Z_\\[])(?:([+-])|(!)))?"
				beginCaptures:
					1: name: "keyword.control.storage.begin.bracket.square"
					2: name: "keyword.operator.other.unit"
					3: name: "keyword.operator"
				end: "[ ]*(\\])"
				endCaptures:
					1: name: "keyword.control.storage.end.bracket.square"
				patterns: [{
					begin: "(?!\\])"
					end: "[ ]*(?=\\]|//|$)"
					patterns: [{ include: "#embedded_statement" }]
				}]
			}
			{
				comment: "A closing bracket seemingly unpaired."
				match: "[ ]*([\\)\\]])"
				captures:
					1: name: "invalid.illegal"
			}
			{
				match: "[ ]*(?:([+*-]|/(?!/)|[<>]=?|[!=]=)|([|&]{2}))(?:[ ]*(?=[!+-][0-9a-zA-Z_\\[])(?:([+-])|(!)))?"
				captures:
					1: name: "keyword.operator"
					2: name: "keyword.operator.control"
					3: name: "keyword.operator.other.unit"
					4: name: "keyword.operator"
			}
			{ include: "#variable" }
			{
				match: "[ ]*(\\.)[ ]*"
				captures:
					1: name: "invalid.illegal"
			}
		]
	embedded_statement:
		patterns: [
			{ include: "#_statement" }
			{
				match: "[ ]*(//)"
				captures:
					1: name: "invalid"
			}
		]
	statement:
		patterns: [
			{ include: "#_statement" }
			{
				match: "[ ]*(//.*)$"
				captures:
					1: name: "comment"
			}
		]
	inline:
		patterns: [{
			begin: "^"
			end: "$"
			patterns: [
				{
					match: "(.*)[ ]*(//.*)$"
					captures:
						1: patterns: [{ include: "#inline" }]
						2: name: "comment"
				}
				{
					match: "(.*)[ ]*(;)[ ]*(?:(?i:(If) (?:[ ]*(?=[!+-][0-9a-zA-Z_\\[])(?:([+-])|(!)))?((?:[^\";]|\"[^\"]*\")*)(?:;|$))?)"
					captures:
						1: patterns: [{ include: "#inline" }]
						2: name: "keyword.control.separator"
						3: name: "keyword"
						4: name: "keyword.operator.other.unit"
						5: name: "keyword.operator"
						6: patterns: [{ include: "#if" }]
				}
				{
					match: "[ ]*(?:([a-zA-Z_]\\w*)(:))?([a-zA-Z_]\\w*)[ ]*(=>)(?:[ ]*(?=[!+-][0-9a-zA-Z_\\[])(?:([+-])|(!)))?"
					captures:
						1: name: "meta.class.variable"
						2: name: "meta.delimiter.colon"
						3: name: "variable.other.member"
						4: name: "keyword.operator"
						5: name: "keyword.operator.other.unit"
						6: name: "keyword.operator"
				}
				{
					match: "[ ]*([a-zA-Z_]\\w*)(?:(?:(\\.)([a-zA-Z_]\\w*))?[ ]*([+*/-]=|=(>?))|(:)([a-zA-Z_]\\w*)[ ]*([+*/-]=|=>|=([^>])))(?:[ ]*(?=[!+-][0-9a-zA-Z_\\[])(?:([+-])|(!)))?"
					captures:
						1: name: "meta.class.variable"
						2: name: "meta.delimiter.period"
						3: name: "variable"
						4: name: "keyword.operator"
						5: name: "invalid.illegal"
						6: name: "meta.delimiter.colon"
						7: name: "variable.other.member"
						8: name: "keyword.operator"
						9: name: "invalid.illegal"
						10: name: "keyword.operator.other.unit"
						11: name: "keyword.operator"
				}
				{ include: "#_statement" }
			]
		}]
	if:
		patterns: [{
			begin: "^"
			end: "$"
			patterns: [{ include: "#statement" }]
		}]
	lpmod:
		patterns: [
			{
				match: "^(MODULE_(?:(ID)|UNIQUEID))(:)(?:(?:([^ \\r\\n])| )(.*))?$"
				captures:
					1: name: "punctuation.definition.heading.bold"
					2: name: "invalid"
					3: name: "keyword"
					4: name: "invalid"
					5: patterns: [{ include: "#identifier" }]
			}
			{
				match: "^(MODULE_REQUIREMENTS)(:)(?:(?:([^ \\r\\n])| )(.*))?$"
				captures:
					1: name: "punctuation.definition.heading.bold"
					2: name: "keyword"
					3: name: "invalid"
					4: patterns: [{ include: "#identifiers" }]
			}
			{
				match: "^(MODULE_(?:NAME|AUTHOR))(:)(?:(?:([^ \\r\\n])| )(.*))?$"
				captures:
					1: name: "punctuation.definition.heading.bold"
					2: name: "keyword"
					3: name: "invalid"
					4: patterns: [{ include: "#raw_string" }]
			}
			{
				match: "^(MODULE_LINK)(:)(?:(?:([^ \\r\\n])| )(.*))?$"
				captures:
					1: name: "punctuation.definition.heading.bold"
					2: name: "keyword"
					3: name: "invalid"
					4: patterns: [
						{ include: "#isNone" }
						{ include: "#url" }
					]
			}
			{
				match: "^(MODULE_DESCRIPTION)(:)(?:(?:([^ \\r\\n])| ).*)?$"
				captures:
					1: name: "punctuation.definition.heading.bold"
					2: name: "keyword"
					3: name: "invalid"
			}
			{
				match: "^[ \t]*(//).*$"
				captures:
					1: name: "invalid.illegal"
			}
			{
				comment: "Unofficial field name."
				match: "^(MODULE_[^:]+)(:)(?:(?:([^ \\r\\n])| )(.*))?$"
				captures:
					1: name: "punctuation.definition.heading"
					2: name: "keyword"
					3: name: "invalid"
					4: name: "none"
			}
		]
	lpquest:
		patterns: [
			{
				match: "^(((?:QUEST_(?:UNIQUE)?)?)ID)(:)(?:(?:([^ \\r\\n])| )(.*))?$"
				captures:
					1: name: "punctuation.definition.heading.bold"
					2: name: "invalid"
					3: name: "keyword"
					4: name: "invalid"
					5: patterns: [{ include: "#identifier" }]
			}
			{
				match: "^(((?:QUEST_)?)NAME)(:)(?:(?:([^ \\r\\n])| )(.*))?$"
				captures:
					1: name: "punctuation.definition.heading.bold"
					2: name: "invalid"
					3: name: "keyword"
					4: name: "invalid"
					5: patterns: [{ include: "#raw_string" }]
			}
			{
				match: "^(((?:QUEST_)?)DESC((?:RIPTION)?))(:)(?:(?:([^ \\r\\n])| ).*)?$"
				captures:
					1: name: "punctuation.definition.heading.bold"
					2: name: "invalid"
					3: name: "invalid"
					4: name: "keyword"
					5: name: "invalid"
			}
			{
				match: "^(ONCE)(:)(?:(?:([^ \\r\\n])| )(.*))?$"
				captures:
					1: name: "punctuation.definition.heading.bold"
					2: name: "keyword"
					3: name: "invalid"
					4: patterns: [{ include: "#bool" }]
			}
			{
				match: "^(((?:QUEST_)?)START)(:)(?:(?:([^ \\r\\n])| )(.*))?$"
				captures:
					1: name: "punctuation.definition.heading.bold"
					2: name: "invalid"
					3: name: "keyword"
					4: name: "invalid"
					5: patterns: [{ include: "#identifier" }]
			}
			{
				match: "^(CONDITIO(?:NS|(N)))(:)(?:(?:([^ \\r\\n])| )(.*))?$"
				captures:
					1: name: "punctuation.definition.heading.bold"
					2: name: "invalid"
					3: name: "keyword"
					4: name: "invalid"
					5: patterns: [
						{ include: "#isNone" }
						{ include: "#conditions" }
					]
			}
			{
				match: "^[ \t]*(//).*$"
				captures:
					1: name: "invalid.illegal"
			}
			{
				comment: "Unofficial field name."
				match: "^([^:]+)(:)(?:(?:([^ \\r\\n])| )(.*))?$"
				captures:
					1: name: "punctuation.definition.heading"
					2: name: "keyword"
					3: name: "invalid"
					4: name: "none"
			}
		]
	lpaction:
		patterns: [
			{
				match: "^(ACTION_(?:(ID)|UNIQUEID))(:)(?:(?:([^ \\r\\n])| )(.*))?$"
				captures:
					1: name: "punctuation.definition.heading.bold"
					2: name: "invalid"
					3: name: "keyword"
					4: name: "invalid"
					5: patterns: [{ include: "#identifier" }]
			}
			{
				match: "^(ACTION_NAME)(:)(?:(?:([^ \\r\\n])| )(.*))?$"
				captures:
					1: name: "punctuation.definition.heading.bold"
					2: name: "keyword"
					3: name: "invalid"
					4: patterns: [{ include: "#raw_string" }]
			}
			{
				match: "^(WHERE)(:)(?:(?:([^ \\r\\n])| )(.*))?$"
				captures:
					1: name: "punctuation.definition.heading.bold"
					2: name: "keyword"
					3: name: "invalid"
					4: patterns: [
						{ include: "#isNone" }
						{ include: "#identifier_flags" }
					]
			}
			{
				match: "^(ALSO_TIMEOUT)(:)(?:(?:([^ \\r\\n])| )(.*))?$"
				captures:
					1: name: "punctuation.definition.heading.bold"
					2: name: "keyword"
					3: name: "invalid"
					4: patterns: [
						{ include: "#isNone" }
						{ include: "#identifiers" }
					]
			}
			{
				match: "^(WHEN|MINUTES)(:)(?:(?:([^ \\r\\n])| )(.*))?$"
				captures:
					1: name: "punctuation.definition.heading.bold"
					2: name: "keyword"
					3: name: "invalid"
					4: patterns: [{ include: "#float_range" }]
			}
			{
				match: "^(TIMEOUT_MINUTES)(:)(?:(?:([^ \\r\\n])| )(.*))?$"
				captures:
					1: name: "punctuation.definition.heading.bold"
					2: name: "keyword"
					3: name: "invalid"
					4: patterns: [{ include: "#float" }]
			}
			{
				match: "^(MOVE_FIRST)(:)(?:(?:([^ \\r\\n])| )(.*))?$"
				captures:
					1: name: "punctuation.definition.heading.bold"
					2: name: "keyword"
					3: name: "invalid"
					4: patterns: [{ include: "#bool" }]
			}
			{
				match: "^(EFFECTS)(:)(?:(?:([^ \\r\\n])| )(.*))?$"
				captures:
					1: name: "punctuation.definition.heading.bold"
					2: name: "keyword"
					3: name: "invalid"
					4: patterns: [{ include: "#effects" }]
			}
			{
				match: "^(CONDITIONS)(:)(?:(?:([^ \\r\\n])| )(.*))?$"
				captures:
					1: name: "punctuation.definition.heading.bold"
					2: name: "keyword"
					3: name: "invalid"
					4: patterns: [{ include: "#conditions" }]
			}
			{
				match: "^(SCENE_ALWAYS)(:)(?:(?:([^ \\r\\n])| )(.*))?$"
				captures:
					1: name: "punctuation.definition.heading.bold"
					2: name: "keyword"
					3: name: "invalid"
					4: patterns: [{ include: "#identifier" }]
			}
			{
				match: "^(ANIMATION)(:)(?:(?:([^ \\r\\n])| )(.*))?$"
				captures:
					1: name: "punctuation.definition.heading.bold"
					2: name: "keyword"
					3: name: "invalid"
					4: patterns: [{ include: "#identifier" }]
			}
			{
				comment: "Not in the documentations but found in an official lpaction file."
				match: "^(WHO)(:)(?:(?:([^ \\r\\n])| )(?:[ ]*(?=[!+-][0-9a-zA-Z_\\[])(?:([+-])|(!)))?(.*))?$"
				captures:
					1: name: "punctuation.definition.heading.bold"
					2: name: "keyword"
					3: name: "invalid"
					4: name: "keyword.operator.other.unit"
					5: name: "keyword.operator"
					6: patterns: [{ include: "#inline" }]
			}
			{
				match: "^[ \t]*(//).*$"
				captures:
					1: name: "invalid.illegal"
			}
			{
				comment: "Unofficial field name."
				match: "^([^:]+)(:)(?:(?:([^ \\r\\n])| )(.*))?$"
				captures:
					1: name: "punctuation.definition.heading"
					2: name: "keyword"
					3: name: "invalid"
					4: name: "none"
			}
		]
	lpstat:
		patterns: [
			{
				match: "^(STAT_((?:UNIQUE)?)ID)(:)(?:(?:([^ \\r\\n])| )(.*))?$"
				captures:
					1: name: "punctuation.definition.heading.bold"
					2: name: "invalid"
					3: name: "keyword"
					4: name: "invalid"
					5: patterns: [{ include: "#identifier" }]
			}
			{
				match: "^(STAT_NAME)(:)(?:(?:([^ \\r\\n])| )(.*))?$"
				captures:
					1: name: "punctuation.definition.heading.bold"
					2: name: "keyword"
					3: name: "invalid"
					4: patterns: [{
						match: "^[ ]*([^;]*)(?:(;).*)?"
						captures:
							1: patterns: [{ include: "#raw_string" }]
							2: name: "keyword.operator"
					}]
			}
			{
				match: "^((?:PLAYER|NPC)_ONLY)(:)(?:(?:([^ \\r\\n])| )(.*))?$"
				captures:
					1: name: "punctuation.definition.heading.bold"
					2: name: "keyword"
					3: name: "invalid"
					4: patterns: [{ include: "#bool" }]
			}
			{
				match: "^(HIGHER_BETTER)(:)(?:(?:([^ \\r\\n])| )(.*))?$"
				captures:
					1: name: "punctuation.definition.heading.bold"
					2: name: "keyword"
					3: name: "invalid"
					4: patterns: [
						{
							match: "^[ ]*((?i:no_difficulty_adjustment))[ ]*$"
							captures:
								1: name: "constant.boolean"
						}
						{ include: "#bool" }
					]
			}
			{
				match: "^(STAT_(?:MIN|MAX))(:)(?:(?:([^ \\r\\n])| )(.*))?$"
				captures:
					1: name: "punctuation.definition.heading.bold"
					2: name: "keyword"
					3: name: "invalid"
					4: patterns: [{ include: "#float" }]
			}
			{
				match: "^(DEFAULT_VALUE|DAILY_CHANGE)(:)(?:(?:([^ \\r\\n])| )(.*))?$"
				captures:
					1: name: "punctuation.definition.heading.bold"
					2: name: "keyword"
					3: name: "invalid"
					4: patterns: [{ include: "#float" }]
			}
			{
				match: "^[ \t]*(//).*$"
				captures:
					1: name: "invalid.illegal"
			}
			{
				comment: "Unofficial field name."
				match: "^([^:]+)(:)(?:(?:([^ \\r\\n])| )(.*))?$"
				captures:
					1: name: "punctuation.definition.heading"
					2: name: "keyword"
					3: name: "invalid"
					4: name: "none"
			}
		]
	url_path_sep:
		patterns: [{
			match: "^(/)[^/]*(/.*)?$"
			captures:
				1: name: "meta.separator"
				2: patterns: [{ include: "#url_path_sep" }]
		}]
	url:
		patterns: [
			{
				match: "^[ ]*((?:(file)://(?:(/)|/((?i:[a-z]+):/)|(.)))([^:;/\\\\\\s\\?#]+((?:/[^:;/\\\\\\s\\?#]*)*))(?:(\\?)([^\\\\\\s#]*))?(?:(#)([^\\\\\\s]*))?)[ ]*$"
				captures:
					1: name: "meta.link"
					2: name: "constant"
					3: name: "meta.selector"
					4: name: "meta.selector"
					5: name: "invalid"
					6: name: "string"
					7: patterns: [{ include: "#url_path_sep" }]
					8: name: "meta.separator"
					9: patterns: [{
						contentName: "variable.other.member"
						begin: "^"
						end: "$"
						patterns: [{
							match: "([^&]*)(&)?"
							captures:
								1: name: "meta.separator"
						}]
					}]
					10: name: "meta.separator"
					11: name: "variable.parameter.function"
			}
			{
				match: "^[ ]*(((?:(?:[a-z0-9]+\\.)*[a-z0-9]+\\+)*(?:[a-z0-9]+\\.)*[a-z]+://)((?:[^@]+)@)?(?:(?:((?:(?:(?:\\w[\\w-]{0,62}\\w)|[a-zA-Z])\\.)+[a-zA-Z]{2,6})|((?:\\d{1,3}\\.){3}\\d{1,3}|\\[(?:[0-9a-f]{0,4}:){1,8}:[0-9a-f]{0,4}\\])|([a-z]+))((:)\\d{1,5})?)((?:/[^\\s/#\\?]*)*)(?:(\\?)([^\\s#]*))?(?:(#)([\\S]*))?)[ ]*$"
				captures:
					1: name: "meta.link"
					2: patterns: [
						{
							match: "^((git(\\+))?(?:https?|ssh)|git|ftps?)://$"
							captures:
								1: name: "constant"
								2: name: "meta.selector"
								3: name: "keyword.operator"
						}
						{
							match: "^((?:(?:[a-z0-9]+\\.)*[a-z0-9]+\\+)*)((?:[a-z0-9]+\\.)*[a-z]+)://$"
							captures:
								1: name: "variable.other.member"
								2: patterns: [{
									contentName: "variable"
									begin: "^"
									end: "$"
									patterns: [{
										match: "(\\+)"
										captures:
											1: name: "keyword.operator"
									}]
								}]
						}
					]
					3: patterns: [
						{
							match: "^((?:[\\w!#\\$%&\'\\*\\+-/=\\?\\^`{\\|\\}_~]+\\.)*[\\w!#\\$%&\'\\*\\+-/=\\?\\^`{\\|\\}_~]+(:))?((?:[\\w!#\\$%&\'\\*\\+-/=\\?\\^`{\\|\\}_~]+\\.)*[\\w!#\\$%&\'\\*\\+-/=\\?\\^`{\\|\\}_~]+)(@)$"
							captures:
								1: name: "variable"
								2: name: "keyword.operator"
								3: name: "variable"
								4: name: "keyword.operator"
						}
						{
							match: "^([^@]+)(@)$"
							captures:
								1: name: "invalid"
								2: name: "keyword.operator"
						}
					]
					4: name: "string"
					5: name: "constant.numeric"
					6: patterns: [
						{
							match: "^localhost$"
							name: "keyword"
						}
						{
							match: "^.*$"
							name: "entity.name.section"
						}
					]
					7: name: "constant.numeric"
					8: name: "meta.separator"
					9: patterns: [{ include: "#url_path_sep" }]
					10: name: "meta.separator"
					11: patterns: [{
						contentName: "variable.other.member"
						begin: "^"
						end: "$"
						patterns: [{
							match: "(&)"
							captures:
								1: name: "meta.separator"
						}]
					}]
					12: name: "meta.separator"
					13: name: "variable.parameter.function"
			}
		]
